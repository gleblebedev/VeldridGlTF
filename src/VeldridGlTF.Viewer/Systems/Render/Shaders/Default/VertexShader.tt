<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
#version 450

layout(set = 0, binding = 0) uniform ProjectionBuffer
{
    mat4 Projection;
};

layout(set = 0, binding = 1) uniform ViewBuffer
{
    mat4 View;
};

layout(set = 1, binding = 0) uniform WorldBuffer
{
    mat4 World;
};

<#
	var elements = ShaderKey.VertexLayout.VertexLayoutDescription.Elements;
	for (int location=0; location<elements.Length; ++location)
	{
		WriteLine(string.Format("layout(location = {0}) in {1} {2};", location, Glsl.NameOf(elements[location].Format), elements[location].Name));
	}
#>
<#
    if (ShaderKey.IsFlagSet(ShaderFlag.DiffuseMap))
	{
#>
layout(location = 0) out vec2 fsin_texCoords;
<#
	}
#>
layout(location = 1) out vec3 fsin_normal;

void main()
{
    vec4 worldPosition = World * vec4(POSITION, 1);
    vec4 viewPosition = View * worldPosition;
    vec4 clipPosition = Projection * viewPosition;
    gl_Position = clipPosition;
<#
    if (ShaderKey.IsFlagSet(ShaderFlag.DiffuseMap))
	{
#>
    fsin_texCoords = TEXCOORD_0;
<#
	}
#>
    mat3 InverseWorld = mat3(World);
    fsin_normal = normalize(InverseWorld * NORMAL);
}