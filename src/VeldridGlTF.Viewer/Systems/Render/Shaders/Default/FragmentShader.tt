<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
#version 450

struct MaterialPropertiesInfo
{
    vec4 BaseColor;
};

struct MaterialInfo
{
    float perceptualRoughness;    // roughness value, as authored by the model creator (input to shader)
    vec3 reflectance0;            // full reflectance color (normal incidence angle)

    float alphaRoughness;         // roughness mapped to a more linear change in the roughness (proposed by [2])
    vec3 diffuseColor;            // color contribution from diffuse lighting

    vec3 reflectance90;           // reflectance color at grazing angle
    vec3 specularColor;           // color contribution from specular lighting
};

layout(set = 0, binding = 1) uniform texture2D brdfLUTTexture;
layout(set = 0, binding = 2) uniform sampler brdfLUTSampler;

layout(set = 1, binding = 0) uniform textureCube ReflectionTexture;
layout(set = 1, binding = 1) uniform sampler ReflectionSampler;

layout(set = 3, binding = 0) uniform MaterialProperties
{
    MaterialPropertiesInfo _MaterialProperties;
};
layout(set = 3, binding = 1) uniform texture2D SurfaceTexture;
layout(set = 3, binding = 2) uniform sampler SurfaceSampler;

<#
	for (int location=0; location<Context.Varyings.Count; ++location)
	{
		WriteLine(string.Format("layout(location = {0}) in {1} {2};", Context.Varyings[location].Location, Glsl.NameOf(Context.Varyings[location].Format), Context.Varyings[location].Name));
	}
#>
layout(location = 0) out vec4 fsout_color;

const float GAMMA = 2.2;
const float INV_GAMMA = 1.0 / GAMMA;

// linear to sRGB approximation
// see http://chilliant.blogspot.com/2012/08/srgb-approximations-for-hlsl.html
vec3 LINEARtoSRGB(vec3 color)
{
    return pow(color, vec3(INV_GAMMA));
}

// sRGB to linear approximation
// see http://chilliant.blogspot.com/2012/08/srgb-approximations-for-hlsl.html
vec4 SRGBtoLINEAR(vec4 srgbIn)
{
    return vec4(pow(srgbIn.xyz, vec3(GAMMA)), srgbIn.w);
}

vec3 getIBLContribution(MaterialInfo materialInfo, vec3 n, vec3 v)
{
    float NdotV = clamp(dot(n, v), 0.0, 1.0);
	int u_MipCount = 5;

    float lod = clamp(materialInfo.perceptualRoughness * float(u_MipCount), 0.0, float(u_MipCount));
    vec3 reflection = normalize(reflect(-v, n));

    vec2 brdfSamplePoint = clamp(vec2(NdotV, materialInfo.perceptualRoughness), vec2(0.0, 0.0), vec2(1.0, 1.0));
    vec2 brdf = texture(sampler2D(BRDFTexture, BRDFSampler), brdfSamplePoint).rg;

    vec4 diffuseSample =  textureLod(samplerCube(ReflectionTexture, ReflectionSampler), n, 5.0f);

    vec4 specularSample = textureLod(samplerCube(ReflectionTexture, ReflectionSampler), reflection, lod);

    vec3 diffuseLight = SRGBtoLINEAR(diffuseSample).rgb;
    vec3 specularLight = SRGBtoLINEAR(specularSample).rgb;

    vec3 diffuse = diffuseLight * materialInfo.diffuseColor;
    vec3 specular = specularLight * (materialInfo.specularColor * brdf.x + brdf.y);

    return diffuse + specular;
}


void main()
{
	vec3 normal = vec3(0.0,1.0,0.0);
	float perceptualRoughness = 1.0;
    float metallic = 0.0;
    vec4 baseColor = vec4(0.0, 0.0, 0.0, 1.0);
    vec3 diffuseColor = vec3(0.0);
    vec3 specularColor= vec3(0.3);
	vec3 f0 = vec3(0.04);
<#
	
    if (Context.Normal != null)
	{
		WriteLine("normal = normalize({0});", Context.Normal.Name);
	}
    else if (Context.TBN != null)
	{
		WriteLine("normal = normalize({0}[2]);", Context.TBN.Name);
	}
#>
<#
    if (Context.IsFlagSet(ShaderFlag.HAS_DIFFUSE_MAP) && Context.TexCoord0 != null)
	{
#>
	baseColor = texture(sampler2D(SurfaceTexture, SurfaceSampler),<#= Context.TexCoord0 #>);
<#
	}
	else
	{
#>
	baseColor = _MaterialProperties.BaseColor;
<#
	}
#>
    diffuseColor = baseColor.rgb * (vec3(1.0) - f0) * (1.0 - metallic);

    perceptualRoughness = clamp(perceptualRoughness, 0.0, 1.0);
    metallic = clamp(metallic, 0.0, 1.0);

    // Roughness is authored as perceptual roughness; as is convention,
    // convert to material roughness by squaring the perceptual roughness [2].
    float alphaRoughness = perceptualRoughness * perceptualRoughness;

    // Compute reflectance.
    float reflectance = max(max(specularColor.r, specularColor.g), specularColor.b);

    vec3 specularEnvironmentR0 = specularColor.rgb;
    // Anything less than 2% is physically impossible and is instead considered to be shadowing. Compare to "Real-Time-Rendering" 4th editon on page 325.
    vec3 specularEnvironmentR90 = vec3(clamp(reflectance * 50.0, 0.0, 1.0));

	MaterialInfo materialInfo = MaterialInfo(
        perceptualRoughness,
        specularEnvironmentR0,
        alphaRoughness,
        diffuseColor,
        specularEnvironmentR90,
        specularColor
    );
	vec3 color = vec3(0.0, 0.0, 0.0);
    color += getIBLContribution(materialInfo, normal, <#= Context.CameraPosition #>-<#= Context.WorldPosition #>);
	fsout_color = vec4(color,baseColor.a);
	//fsout_color = vec4(normal.x * 0.5 + 0.5, normal.y * 0.5 + 0.5, normal.z * 0.5 + 0.5, 1.0);
	
}