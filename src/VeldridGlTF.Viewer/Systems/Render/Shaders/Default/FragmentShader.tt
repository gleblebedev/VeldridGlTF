<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
#version 450

struct MaterialPropertiesInfo
{
    vec4 BaseColor;
};

layout(set = 0, binding = 1) uniform texture2D BRDFTexture;
layout(set = 0, binding = 2) uniform sampler BRDFSampler;

layout(set = 1, binding = 0) uniform textureCube ReflectionTexture;
layout(set = 1, binding = 1) uniform sampler ReflectionSampler;

layout(set = 3, binding = 0) uniform MaterialProperties
{
    MaterialPropertiesInfo _MaterialProperties;
};
layout(set = 3, binding = 1) uniform texture2D SurfaceTexture;
layout(set = 3, binding = 2) uniform sampler SurfaceSampler;

<#
	for (int location=0; location<Context.Varyings.Count; ++location)
	{
		WriteLine(string.Format("layout(location = {0}) in {1} {2};", Context.Varyings[location].Location, Glsl.NameOf(Context.Varyings[location].Format), Context.Varyings[location].Name));
	}
#>
layout(location = 0) out vec4 fsout_color;

void main()
{
    float light = 1.0;
	vec3 normal = vec3(0.0,1.0,0.0);
<#
	
    if (Context.Normal != null)
	{
		WriteLine("normal = normalize({0});", Context.Normal.Name);
	}
    else if (Context.TBN != null)
	{
		WriteLine("normal = normalize({0}[2]);", Context.TBN.Name);
	}
	WriteLine("light = normal.y*0.5+0.5;");
    if (Context.IsFlagSet(ShaderFlag.HAS_DIFFUSE_MAP) && Context.TexCoord0 != null)
	{
#>
	vec4 diffuse = texture(sampler2D(SurfaceTexture, SurfaceSampler), vec2(0.0, 0.0));
	vec4 brdf = texture(sampler2D(BRDFTexture, BRDFSampler), vec2(0.0, 0.0));
	vec4 reflection = texture(samplerCube(ReflectionTexture, ReflectionSampler), reflect(<#= Context.CameraPosition #> - <#= Context.WorldPosition #>, normal));
	fsout_color = reflection+brdf+diffuse;
    //fsout_color = texture(sampler2D(SurfaceTexture, SurfaceSampler), <#=Context.TexCoord0 #>) * vec4(light,light,light,light);
<#
	}
	else
	{
#>
    fsout_color = _MaterialProperties.BaseColor * vec4(light,light,light,light);
<#
	}
#>
	
}