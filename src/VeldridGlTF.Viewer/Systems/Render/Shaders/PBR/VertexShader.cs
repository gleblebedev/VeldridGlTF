// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace VeldridGlTF.Viewer.Systems.Render.Shaders.PBR
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using VeldridGlTF.Viewer.Systems.Render.Uniforms;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "E:\MyWork\VeldridGlTF\src\VeldridGlTF.Viewer\Systems\Render\Shaders\PBR\VertexShader.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class VertexShader : VertexShaderBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("#version 450\r\n\r\n#define JOINT_COUNT ");
            
            #line 9 "E:\MyWork\VeldridGlTF\src\VeldridGlTF.Viewer\Systems\Render\Shaders\PBR\VertexShader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Context.JointCount));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n");
            
            #line 11 "E:\MyWork\VeldridGlTF\src\VeldridGlTF.Viewer\Systems\Render\Shaders\PBR\VertexShader.tt"

	WriteDefines();

            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 15 "E:\MyWork\VeldridGlTF\src\VeldridGlTF.Viewer\Systems\Render\Shaders\PBR\VertexShader.tt"

	for (int location=0; location<Context.VertexElements.Count; ++location)
	{
		WriteLine(string.Format("layout(location = {0}) in {1} {2};", location, Glsl.NameOf(Context.VertexElements[location].Format), Context.VertexElements[location].Name));
	}

            
            #line default
            #line hidden
            
            #line 21 "E:\MyWork\VeldridGlTF\src\VeldridGlTF.Viewer\Systems\Render\Shaders\PBR\VertexShader.tt"

	for (int location=0; location<Context.Varyings.Count; ++location)
	{
		WriteLine(string.Format("layout(location = {0}) out {1} {2};", Context.Varyings[location].Location, Glsl.NameOf(Context.Varyings[location].Format), Context.Varyings[location].Name));
	}

            
            #line default
            #line hidden
            this.Write("\r\nlayout(set = 0, binding = 0) uniform EnvironmentProperties\r\n{\r\n");
            
            #line 30 "E:\MyWork\VeldridGlTF\src\VeldridGlTF.Viewer\Systems\Render\Shaders\PBR\VertexShader.tt"

	WriteMembers<EnvironmentProperties>();

            
            #line default
            #line hidden
            this.Write("};\r\nlayout(set = 2, binding = 0) uniform ObjectProperties\r\n{\r\n");
            
            #line 36 "E:\MyWork\VeldridGlTF\src\VeldridGlTF.Viewer\Systems\Render\Shaders\PBR\VertexShader.tt"

	WriteMembers<ObjectProperties>();

            
            #line default
            #line hidden
            this.Write("};\r\n\r\n#ifdef USE_SKINNING\r\nlayout(set = 2, binding = 1) uniform JointMatrices\r\n{\r" +
                    "\n\tmat4 u_jointMatrix[JOINT_COUNT];\r\n};\r\nlayout(set = 2, binding = 2) uniform Joi" +
                    "ntNormalMatrices\r\n{\r\n\tmat4 u_jointNormalMatrix[JOINT_COUNT];\r\n};\r\n#endif\r\n\r\n#ifd" +
                    "ef USE_SKINNING\r\nmat4 getSkinningMatrix()\r\n{\r\n    mat4 skin = mat4(0);\r\n\r\n    #i" +
                    "f defined(HAS_WEIGHT_SET1) && defined(HAS_JOINT_SET1)\r\n    skin +=\r\n        WEIG" +
                    "HTS_0.x * u_jointMatrix[int(JOINTS_0.x)] +\r\n        WEIGHTS_0.y * u_jointMatrix[" +
                    "int(JOINTS_0.y)] +\r\n        WEIGHTS_0.z * u_jointMatrix[int(JOINTS_0.z)] +\r\n    " +
                    "    WEIGHTS_0.w * u_jointMatrix[int(JOINTS_0.w)];\r\n    #endif\r\n\r\n    #if defined" +
                    "(HAS_WEIGHT_SET2) && defined(HAS_JOINT_SET2)\r\n    skin +=\r\n        WEIGHTS_1.x *" +
                    " u_jointMatrix[int(JOINTS_1.x)] +\r\n        WEIGHTS_1.y * u_jointMatrix[int(JOINT" +
                    "S_1.y)] +\r\n        WEIGHTS_1.z * u_jointMatrix[int(JOINTS_1.z)] +\r\n        WEIGH" +
                    "TS_1.w * u_jointMatrix[int(JOINTS_1.w)];\r\n    #endif\r\n\r\n    return skin;\r\n}\r\n\r\nm" +
                    "at4 getSkinningNormalMatrix()\r\n{\r\n    mat4 skin = mat4(0);\r\n\r\n    #if defined(HA" +
                    "S_WEIGHT_SET1) && defined(HAS_JOINT_SET1)\r\n    skin +=\r\n        WEIGHTS_0.x * u_" +
                    "jointNormalMatrix[int(JOINTS_0.x)] +\r\n        WEIGHTS_0.y * u_jointNormalMatrix[" +
                    "int(JOINTS_0.y)] +\r\n        WEIGHTS_0.z * u_jointNormalMatrix[int(JOINTS_0.z)] +" +
                    "\r\n        WEIGHTS_0.w * u_jointNormalMatrix[int(JOINTS_0.w)];\r\n    #endif\r\n\r\n   " +
                    " #if defined(HAS_WEIGHT_SET2) && defined(HAS_JOINT_SET2)\r\n    skin +=\r\n        W" +
                    "EIGHTS_1.x * u_jointNormalMatrix[int(JOINTS_1.x)] +\r\n        WEIGHTS_1.y * u_joi" +
                    "ntNormalMatrix[int(JOINTS_1.y)] +\r\n        WEIGHTS_1.z * u_jointNormalMatrix[int" +
                    "(JOINTS_1.z)] +\r\n        WEIGHTS_1.w * u_jointNormalMatrix[int(JOINTS_1.w)];\r\n  " +
                    "  #endif\r\n\r\n    return skin;\r\n}\r\n#endif // !USE_SKINNING\r\n\r\n#ifdef USE_MORPHING\r" +
                    "\nvec4 getTargetPosition()\r\n{\r\n    vec4 pos = vec4(0);\r\n\r\n#ifdef HAS_TARGET_POSIT" +
                    "ION0\r\n    pos.xyz += MorphWeights[0] * TARGET_POSITION0;\r\n#endif\r\n\r\n#ifdef HAS_T" +
                    "ARGET_POSITION1\r\n    pos.xyz += MorphWeights[1] * TARGET_POSITION1;\r\n#endif\r\n\r\n#" +
                    "ifdef HAS_TARGET_POSITION2\r\n    pos.xyz += MorphWeights[2] * TARGET_POSITION2;\r\n" +
                    "#endif\r\n\r\n#ifdef HAS_TARGET_POSITION3\r\n    pos.xyz += MorphWeights[3] * TARGET_P" +
                    "OSITION3;\r\n#endif\r\n\r\n#ifdef HAS_TARGET_POSITION4\r\n    pos.xyz += MorphWeights[4]" +
                    " * TARGET_POSITION4;\r\n#endif\r\n\r\n    return pos;\r\n}\r\n\r\nvec4 getTargetNormal()\r\n{\r" +
                    "\n    vec4 normal = vec4(0);\r\n\r\n#ifdef HAS_TARGET_NORMAL0\r\n    normal.xyz += Morp" +
                    "hWeights[0] * TARGET_NORMAL0;\r\n#endif\r\n\r\n#ifdef HAS_TARGET_NORMAL1\r\n    normal.x" +
                    "yz += MorphWeights[1] * TARGET_NORMAL1;\r\n#endif\r\n\r\n#ifdef HAS_TARGET_NORMAL2\r\n  " +
                    "  normal.xyz += MorphWeights[2] * TARGET_NORMAL2;\r\n#endif\r\n\r\n#ifdef HAS_TARGET_N" +
                    "ORMAL3\r\n    normal.xyz += MorphWeights[3] * TARGET_NORMAL3;\r\n#endif\r\n\r\n#ifdef HA" +
                    "S_TARGET_NORMAL4\r\n    normal.xyz += MorphWeights[4] * TARGET_NORMAL4;\r\n#endif\r\n\r" +
                    "\n    return normal;\r\n}\r\n\r\nvec4 getTargetTangent()\r\n{\r\n    vec4 tangent = vec4(0)" +
                    ";\r\n\r\n#ifdef HAS_TARGET_TANGENT0\r\n    tangent.xyz += MorphWeights[0] * TARGET_TAN" +
                    "GENT0;\r\n#endif\r\n\r\n#ifdef HAS_TARGET_TANGENT1\r\n    tangent.xyz += MorphWeights[1]" +
                    " * TARGET_TANGENT1;\r\n#endif\r\n\r\n#ifdef HAS_TARGET_TANGENT2\r\n    tangent.xyz += Mo" +
                    "rphWeights[2] * TARGET_TANGENT2;\r\n#endif\r\n\r\n#ifdef HAS_TARGET_TANGENT3\r\n    tang" +
                    "ent.xyz += MorphWeights[3] * TARGET_TANGENT3;\r\n#endif\r\n\r\n#ifdef HAS_TARGET_TANGE" +
                    "NT4\r\n    tangent.xyz += MorphWeights[4] * TARGET_TANGENT4;\r\n#endif\r\n\r\n    return" +
                    " tangent;\r\n}\r\n\r\n#endif // !USE_MORPHING\r\n\r\n\r\nvec4 getPosition()\r\n{\r\n    vec4 pos" +
                    " = vec4(POSITION, 1.0);\r\n\r\n#ifdef USE_MORPHING\r\n    pos += getTargetPosition();\r" +
                    "\n#endif\r\n\r\n#ifdef USE_SKINNING\r\n    pos = getSkinningMatrix() * pos;\r\n#endif\r\n\r\n" +
                    "    return pos;\r\n}\r\n\r\n#ifdef HAS_NORMALS\r\nvec4 getNormal()\r\n{\r\n    vec4 normal =" +
                    " vec4(NORMAL.xyz,0);\r\n\r\n#ifdef USE_MORPHING\r\n    normal += getTargetNormal();\r\n#" +
                    "endif\r\n\r\n#ifdef USE_SKINNING\r\n    normal = getSkinningNormalMatrix() * normal;\r\n" +
                    "#endif\r\n\r\n    return normalize(normal);\r\n}\r\n#endif\r\n\r\n#ifdef HAS_TANGENTS\r\nvec4 " +
                    "getTangent()\r\n{\r\n    vec4 tangent = TANGENT;\r\n\r\n#ifdef USE_MORPHING\r\n    tangent" +
                    " += getTargetTangent();\r\n#endif\r\n\r\n#ifdef USE_SKINNING\r\n    tangent = getSkinnin" +
                    "gMatrix() * tangent;\r\n#endif\r\n\r\n    return normalize(tangent);\r\n}\r\n#endif\r\n\r\nvoi" +
                    "d main()\r\n{\r\n    vec4 pos = ModelMatrix * getPosition();\r\n    v_Position = vec3(" +
                    "pos.xyz) / pos.w;\r\n\r\n    #ifdef HAS_NORMALS\r\n    #ifdef HAS_TANGENTS\r\n    vec4 t" +
                    "angent = getTangent();\r\n    vec3 normalW = normalize(vec3(NormalMatrix * vec4(ge" +
                    "tNormal().xyz, 0.0)));\r\n    vec3 tangentW = normalize(vec3(ModelMatrix * vec4(ta" +
                    "ngent.xyz, 0.0)));\r\n    vec3 bitangentW = cross(normalW, tangentW) * tangent.w;\r" +
                    "\n    v_TBN = mat3(tangentW, bitangentW, normalW);\r\n    #else // !HAS_TANGENTS\r\n " +
                    "   v_Normal = normalize(vec3(NormalMatrix * vec4(getNormal().xyz, 0.0)));\r\n    #" +
                    "endif\r\n    #endif // !HAS_NORMALS\r\n\r\n    v_UVCoord1 = vec2(0.0, 0.0);\r\n    v_UVC" +
                    "oord2 = vec2(0.0, 0.0);\r\n\r\n    #ifdef HAS_UV_SET1\r\n    v_UVCoord1 = TEXCOORD_0;\r" +
                    "\n    #endif\r\n\r\n    #ifdef HAS_UV_SET2\r\n    v_UVCoord2 = TEXCOORD_1;\r\n    #endif\r" +
                    "\n\r\n    #if defined(HAS_VERTEX_COLOR_VEC3)\r\n    v_Color = vec4(COLOR_0, 1.0f);\r\n " +
                    "   #endif\r\n    #if defined(HAS_VERTEX_COLOR_VEC4)\r\n    v_Color = COLOR_0;\r\n    #" +
                    "endif\r\n\r\n    gl_Position = u_ViewProjectionMatrix * pos;\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class VertexShaderBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
