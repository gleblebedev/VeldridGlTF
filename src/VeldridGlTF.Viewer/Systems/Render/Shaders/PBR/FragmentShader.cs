// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace VeldridGlTF.Viewer.Systems.Render.Shaders.PBR
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "E:\MyWork\VeldridGlTF\src\VeldridGlTF.Viewer\Systems\Render\Shaders\PBR\FragmentShader.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class FragmentShader : FragmentShaderBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"#version 450

//
// This fragment shader defines a reference implementation for Physically Based Shading of
// a microfacet surface material defined by a glTF model.
//
// References:
// [1] Real Shading in Unreal Engine 4
//     http://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_notes_v2.pdf
// [2] Physically Based Shading at Disney
//     http://blog.selfshadow.com/publications/s2012-shading-course/burley/s2012_pbs_disney_brdf_notes_v3.pdf
// [3] README.md - Environment Maps
//     https://github.com/KhronosGroup/glTF-WebGL-PBR/#environment-maps
// [4] ""An Inexpensive BRDF Model for Physically based Rendering"" by Christophe Schlick
//     https://www.cs.virginia.edu/~jdl/bib/appearance/analytic%20models/schlick94b.pdf

");
            
            #line 22 "E:\MyWork\VeldridGlTF\src\VeldridGlTF.Viewer\Systems\Render\Shaders\PBR\FragmentShader.tt"

	WriteDefines();

            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 26 "E:\MyWork\VeldridGlTF\src\VeldridGlTF.Viewer\Systems\Render\Shaders\PBR\FragmentShader.tt"

	for (int location=0; location<Context.Varyings.Count; ++location)
	{
		WriteLine(string.Format("layout(location = {0}) in {1} {2};", Context.Varyings[location].Location, Glsl.NameOf(Context.Varyings[location].Format), Context.Varyings[location].Name));
	}

            
            #line default
            #line hidden
            this.Write("layout(set = 0, binding = 0) uniform EnvironmentProperties\r\n{\r\n");
            
            #line 34 "E:\MyWork\VeldridGlTF\src\VeldridGlTF.Viewer\Systems\Render\Shaders\PBR\FragmentShader.tt"

	WriteMembers<EnvironmentProperties>();

            
            #line default
            #line hidden
            this.Write("};\r\nlayout (location=0) out vec4 outFragColor;\r\n\r\n#ifdef USE_TEX_LOD\r\n#extension " +
                    "GL_EXT_shader_texture_lod: enable\r\n#endif\r\n\r\n#extension GL_OES_standard_derivati" +
                    "ves : enable\r\n\r\n#ifdef USE_HDR\r\n#extension GL_OES_texture_float : enable\r\n#exten" +
                    "sion GL_OES_texture_float_linear : enable\r\n#endif\r\n\r\nprecision highp float;\r\n\r\nc" +
                    "onst float GAMMA = 2.2;\r\nconst float INV_GAMMA = 1.0 / GAMMA;\r\n\r\n// linear to sR" +
                    "GB approximation\r\n// see http://chilliant.blogspot.com/2012/08/srgb-approximatio" +
                    "ns-for-hlsl.html\r\nvec3 LINEARtoSRGB(vec3 color)\r\n{\r\n    return pow(color, vec3(I" +
                    "NV_GAMMA));\r\n}\r\n\r\n// sRGB to linear approximation\r\n// see http://chilliant.blogs" +
                    "pot.com/2012/08/srgb-approximations-for-hlsl.html\r\nvec4 SRGBtoLINEAR(vec4 srgbIn" +
                    ")\r\n{\r\n    return vec4(pow(srgbIn.xyz, vec3(GAMMA)), srgbIn.w);\r\n}\r\n\r\n// Uncharte" +
                    "d 2 tone map\r\n// see: http://filmicworlds.com/blog/filmic-tonemapping-operators/" +
                    "\r\nvec3 toneMapUncharted2Impl(vec3 color)\r\n{\r\n    const float A = 0.15;\r\n    cons" +
                    "t float B = 0.50;\r\n    const float C = 0.10;\r\n    const float D = 0.20;\r\n    con" +
                    "st float E = 0.02;\r\n    const float F = 0.30;\r\n    return ((color*(A*color+C*B)+" +
                    "D*E)/(color*(A*color+B)+D*F))-E/F;\r\n}\r\n\r\nvec3 toneMapUncharted(vec3 color)\r\n{\r\n " +
                    "   const float W = 11.2;\r\n    color = toneMapUncharted2Impl(color * 2.0);\r\n    v" +
                    "ec3 whiteScale = 1.0 / toneMapUncharted2Impl(vec3(W));\r\n    return LINEARtoSRGB(" +
                    "color * whiteScale);\r\n}\r\n\r\n// Hejl Richard tone map\r\n// see: http://filmicworlds" +
                    ".com/blog/filmic-tonemapping-operators/\r\nvec3 toneMapHejlRichard(vec3 color)\r\n{\r" +
                    "\n    color = max(vec3(0.0), color - vec3(0.004));\r\n    return (color*(6.2*color+" +
                    ".5))/(color*(6.2*color+1.7)+0.06);\r\n}\r\n\r\n// ACES tone map\r\n// see: https://knark" +
                    "owicz.wordpress.com/2016/01/06/aces-filmic-tone-mapping-curve/\r\nvec3 toneMapACES" +
                    "(vec3 color)\r\n{\r\n    const float A = 2.51;\r\n    const float B = 0.03;\r\n    const" +
                    " float C = 2.43;\r\n    const float D = 0.59;\r\n    const float E = 0.14;\r\n    retu" +
                    "rn LINEARtoSRGB(clamp((color * (A * color + B)) / (color * (C * color + D) + E)," +
                    " 0.0, 1.0));\r\n}\r\n\r\nvec3 toneMap(vec3 color)\r\n{\r\n    color *= u_Exposure;\r\n\r\n#ifd" +
                    "ef TONEMAP_UNCHARTED\r\n    return toneMapUncharted(color);\r\n#endif\r\n\r\n#ifdef TONE" +
                    "MAP_HEJLRICHARD\r\n    return toneMapHejlRichard(color);\r\n#endif\r\n\r\n#ifdef TONEMAP" +
                    "_ACES\r\n    return toneMapACES(color);\r\n#endif\r\n\r\n    return LINEARtoSRGB(color);" +
                    "\r\n}\r\n\r\n\r\n// General Material\r\n#ifdef HAS_NORMAL_MAP\r\nlayout(set = 7, binding = 0" +
                    ") uniform texture2D NormalTexture;\r\nlayout(set = 7, binding = 1) uniform sampler" +
                    " NormalSampler;\r\nlayout(set = 7, binding = 2) uniform NormalMapProperties\r\n{\r\n");
            
            #line 137 "E:\MyWork\VeldridGlTF\src\VeldridGlTF.Viewer\Systems\Render\Shaders\PBR\FragmentShader.tt"

	WriteMembers<NormalMapProperties>();

            
            #line default
            #line hidden
            this.Write("};\r\n#endif\r\n\r\n#ifdef HAS_OCCLUSION_MAP\r\nlayout(set = 8, binding = 0) uniform text" +
                    "ure2D OcclusionTexture;\r\nlayout(set = 8, binding = 1) uniform sampler OcclusionS" +
                    "ampler;\r\nlayout(set = 8, binding = 2) uniform OcclusionMapProperties\r\n{\r\n");
            
            #line 148 "E:\MyWork\VeldridGlTF\src\VeldridGlTF.Viewer\Systems\Render\Shaders\PBR\FragmentShader.tt"

	WriteMembers<OcclusionMapProperties>();

            
            #line default
            #line hidden
            this.Write("};\r\n#endif\r\n\r\n\r\n#ifdef HAS_EMISSIVE_MAP\r\nlayout(set = 5, binding = 0) uniform tex" +
                    "ture2D EmissiveTexture;\r\nlayout(set = 5, binding = 1) uniform sampler EmissiveSa" +
                    "mpler;\r\nlayout(set = 5, binding = 2) uniform EmissiveMapProperties\r\n{\r\n");
            
            #line 160 "E:\MyWork\VeldridGlTF\src\VeldridGlTF.Viewer\Systems\Render\Shaders\PBR\FragmentShader.tt"

	WriteMembers<EmissiveMapProperties>();

            
            #line default
            #line hidden
            this.Write("};\r\n\r\n#endif\r\n\r\n#ifdef MATERIAL_SPECULARGLOSSINESS\r\nlayout(set = 6, binding = 0) " +
                    "uniform SpecularGlossiness\r\n{\r\n");
            
            #line 170 "E:\MyWork\VeldridGlTF\src\VeldridGlTF.Viewer\Systems\Render\Shaders\PBR\FragmentShader.tt"

	WriteMembers<SpecularGlossiness>();

            
            #line default
            #line hidden
            this.Write(@"};

#endif
#ifdef HAS_DIFFUSE_MAP
layout(set = 6, binding = 1) uniform texture2D DiffuseTexture;
layout(set = 6, binding = 2) uniform sampler DiffuseSampler;
#endif
#ifdef HAS_SPECULAR_GLOSSINESS_MAP
layout(set = 6, binding = 3) uniform texture2D SpecularGlossinessTexture;
layout(set = 6, binding = 4) uniform sampler SpecularGlossinessSampler;
#endif

#ifdef MATERIAL_METALLICROUGHNESS
layout(set = 6, binding = 0) uniform MetallicRoughness
{
");
            
            #line 188 "E:\MyWork\VeldridGlTF\src\VeldridGlTF.Viewer\Systems\Render\Shaders\PBR\FragmentShader.tt"

	WriteMembers<MetallicRoughness>();

            
            #line default
            #line hidden
            this.Write("};\r\n\r\n#endif\r\n#ifdef HAS_BASE_COLOR_MAP\r\nlayout(set = 6, binding = 1) uniform tex" +
                    "ture2D BaseColorTexture;\r\nlayout(set = 6, binding = 2) uniform sampler BaseColor" +
                    "Sampler;\r\n#endif\r\n#ifdef HAS_METALLIC_ROUGHNESS_MAP\r\nlayout(set = 6, binding = 3" +
                    ") uniform texture2D MetallicRoughnessTexture;\r\nlayout(set = 6, binding = 4) unif" +
                    "orm sampler MetallicRoughnessSampler;\r\n#endif\r\n\r\n// IBL\r\n#ifdef USE_IBL\r\nlayout(" +
                    "set = 0, binding = 1) uniform texture2D brdfLUTTexture;\r\nlayout(set = 0, binding" +
                    " = 2) uniform sampler brdfLUTSampler;\r\n\r\nlayout(set = 1, binding = 0) uniform te" +
                    "xtureCube DiffuseEnvTexture;\r\nlayout(set = 1, binding = 1) uniform sampler Diffu" +
                    "seEnvSampler;\r\nlayout(set = 1, binding = 2) uniform textureCube SpecularEnvTextu" +
                    "re;\r\nlayout(set = 1, binding = 3) uniform sampler SpecularEnvSampler;\r\n#endif\r\n\r" +
                    "\nvec2 getNormalUV()\r\n{\r\n    vec3 uv = vec3(v_UVCoord1, 1.0);\r\n#ifdef HAS_NORMAL_" +
                    "MAP\r\n    uv.xy = NormalUVSet < 1 ? v_UVCoord1 : v_UVCoord2;\r\n    #ifdef HAS_NORM" +
                    "AL_UV_TRANSFORM\r\n    uv *= NormalUVTransform;\r\n    #endif\r\n#endif\r\n    return uv" +
                    ".xy;\r\n}\r\n\r\nvec2 getEmissiveUV()\r\n{\r\n    vec3 uv = vec3(v_UVCoord1, 1.0);\r\n#ifdef" +
                    " HAS_EMISSIVE_MAP\r\n    uv.xy = EmissiveUVSet < 1 ? v_UVCoord1 : v_UVCoord2;\r\n   " +
                    " #ifdef HAS_EMISSIVE_UV_TRANSFORM\r\n    uv *= EmissiveUVTransform;\r\n    #endif\r\n#" +
                    "endif\r\n\r\n    return uv.xy;\r\n}\r\n\r\nvec2 getOcclusionUV()\r\n{\r\n    vec3 uv = vec3(v_" +
                    "UVCoord1, 1.0);\r\n#ifdef HAS_OCCLUSION_MAP\r\n    uv.xy = OcclusionUVSet < 1 ? v_UV" +
                    "Coord1 : v_UVCoord2;\r\n    #ifdef HAS_OCCLSION_UV_TRANSFORM\r\n    uv *= OcclusionU" +
                    "VTransform;\r\n    #endif\r\n#endif\r\n    return uv.xy;\r\n}\r\n\r\nvec2 getBaseColorUV()\r\n" +
                    "{\r\n    vec3 uv = vec3(v_UVCoord1, 1.0);\r\n#ifdef HAS_BASE_COLOR_MAP\r\n    uv.xy = " +
                    "BaseColorUVSet < 1 ? v_UVCoord1 : v_UVCoord2;\r\n    #ifdef HAS_BASECOLOR_UV_TRANS" +
                    "FORM\r\n    uv *= BaseColorUVTransform;\r\n    #endif\r\n#endif\r\n    return uv.xy;\r\n}\r" +
                    "\n\r\nvec2 getMetallicRoughnessUV()\r\n{\r\n    vec3 uv = vec3(v_UVCoord1, 1.0);\r\n#ifde" +
                    "f HAS_METALLIC_ROUGHNESS_MAP\r\n    uv.xy = MetallicRoughnessUVSet < 1 ? v_UVCoord" +
                    "1 : v_UVCoord2;\r\n    #ifdef HAS_METALLICROUGHNESS_UV_TRANSFORM\r\n    uv *= Metall" +
                    "icRoughnessUVTransform;\r\n    #endif\r\n#endif\r\n    return uv.xy;\r\n}\r\n\r\nvec2 getSpe" +
                    "cularGlossinessUV()\r\n{\r\n    vec3 uv = vec3(v_UVCoord1, 1.0);\r\n#ifdef HAS_SPECULA" +
                    "R_GLOSSINESS_MAP\r\n    uv.xy = SpecularGlossinessUVSet < 1 ? v_UVCoord1 : v_UVCoo" +
                    "rd2;\r\n    #ifdef HAS_SPECULARGLOSSINESS_UV_TRANSFORM\r\n    uv *= SpecularGlossine" +
                    "ssUVTransform;\r\n    #endif\r\n#endif\r\n    return uv.xy;\r\n}\r\n\r\nvec2 getDiffuseUV()\r" +
                    "\n{\r\n    vec3 uv = vec3(v_UVCoord1, 1.0);\r\n#ifdef HAS_DIFFUSE_MAP\r\n    uv.xy = Di" +
                    "ffuseUVSet < 1 ? v_UVCoord1 : v_UVCoord2;\r\n    #ifdef HAS_DIFFUSE_UV_TRANSFORM\r\n" +
                    "    uv *= DiffuseUVTransform;\r\n    #endif\r\n#endif\r\n    return uv.xy;\r\n}\r\n\r\nconst" +
                    " float M_PI = 3.141592653589793;\r\nconst float c_MinReflectance = 0.04;\r\n\r\nstruct" +
                    " AngularInfo\r\n{\r\n    float NdotL;                  // cos angle between normal a" +
                    "nd light direction\r\n    float NdotV;                  // cos angle between norma" +
                    "l and view direction\r\n    float NdotH;                  // cos angle between nor" +
                    "mal and half vector\r\n    float LdotH;                  // cos angle between ligh" +
                    "t direction and half vector\r\n\r\n    float VdotH;                  // cos angle be" +
                    "tween view direction and half vector\r\n\r\n    vec3 padding;\r\n};\r\n\r\nvec4 getVertexC" +
                    "olor()\r\n{\r\n   vec4 color = vec4(1.0, 1.0, 1.0, 1.0);\r\n\r\n#ifdef HAS_VERTEX_COLOR_" +
                    "VEC3\r\n    color.rgb = v_Color;\r\n#endif\r\n#ifdef HAS_VERTEX_COLOR_VEC4\r\n    color " +
                    "= v_Color;\r\n#endif\r\n\r\n   return color;\r\n}\r\n\r\n// Find the normal for this fragmen" +
                    "t, pulling either from a predefined normal map\r\n// or from the interpolated mesh" +
                    " normal and tangent attributes.\r\nvec3 getNormal()\r\n{\r\n    vec2 UV = getNormalUV(" +
                    ");\r\n\r\n    // Retrieve the tangent space matrix\r\n#ifndef HAS_TANGENTS\r\n    vec3 p" +
                    "os_dx = dFdx(v_Position);\r\n    vec3 pos_dy = dFdy(v_Position);\r\n    vec3 tex_dx " +
                    "= dFdx(vec3(UV, 0.0));\r\n    vec3 tex_dy = dFdy(vec3(UV, 0.0));\r\n    vec3 t = (te" +
                    "x_dy.t * pos_dx - tex_dx.t * pos_dy) / (tex_dx.s * tex_dy.t - tex_dy.s * tex_dx." +
                    "t);\r\n\r\n#ifdef HAS_NORMALS\r\n    vec3 ng = normalize(v_Normal);\r\n#else\r\n    vec3 n" +
                    "g = cross(pos_dx, pos_dy);\r\n#endif\r\n\r\n    t = normalize(t - ng * dot(ng, t));\r\n " +
                    "   vec3 b = normalize(cross(ng, t));\r\n    mat3 tbn = mat3(t, b, ng);\r\n#else // H" +
                    "AS_TANGENTS\r\n    mat3 tbn = v_TBN;\r\n#endif\r\n\r\n#ifdef HAS_NORMAL_MAP\r\n    vec3 n " +
                    "= texture(sampler2D(NormalTexture, NormalSampler), UV).rgb;\r\n    n = normalize(t" +
                    "bn * ((2.0 * n - 1.0) * vec3(NormalScale, NormalScale, 1.0)));\r\n#else\r\n    // Th" +
                    "e tbn matrix is linearly interpolated, so we need to re-normalize\r\n    vec3 n = " +
                    "normalize(tbn[2].xyz);\r\n#endif\r\n\r\n    return n;\r\n}\r\n\r\nfloat getPerceivedBrightne" +
                    "ss(vec3 vector)\r\n{\r\n    return sqrt(0.299 * vector.r * vector.r + 0.587 * vector" +
                    ".g * vector.g + 0.114 * vector.b * vector.b);\r\n}\r\n\r\n// https://github.com/Khrono" +
                    "sGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_materials_pbrSpecularGlossine" +
                    "ss/examples/convert-between-workflows/js/three.pbrUtilities.js#L34\r\nfloat solveM" +
                    "etallic(vec3 diffuse, vec3 specular, float oneMinusSpecularStrength) {\r\n    floa" +
                    "t specularBrightness = getPerceivedBrightness(specular);\r\n\r\n    if (specularBrig" +
                    "htness < c_MinReflectance) {\r\n        return 0.0;\r\n    }\r\n\r\n    float diffuseBri" +
                    "ghtness = getPerceivedBrightness(diffuse);\r\n\r\n    float a = c_MinReflectance;\r\n " +
                    "   float b = diffuseBrightness * oneMinusSpecularStrength / (1.0 - c_MinReflecta" +
                    "nce) + specularBrightness - 2.0 * c_MinReflectance;\r\n    float c = c_MinReflecta" +
                    "nce - specularBrightness;\r\n    float D = b * b - 4.0 * a * c;\r\n\r\n    return clam" +
                    "p((-b + sqrt(D)) / (2.0 * a), 0.0, 1.0);\r\n}\r\n\r\nAngularInfo getAngularInfo(vec3 p" +
                    "ointToLight, vec3 normal, vec3 view)\r\n{\r\n    // Standard one-letter names\r\n    v" +
                    "ec3 n = normalize(normal);           // Outward direction of surface point\r\n    " +
                    "vec3 v = normalize(view);             // Direction from surface point to view\r\n " +
                    "   vec3 l = normalize(pointToLight);     // Direction from surface point to ligh" +
                    "t\r\n    vec3 h = normalize(l + v);            // Direction of the vector between " +
                    "l and v\r\n\r\n    float NdotL = clamp(dot(n, l), 0.0, 1.0);\r\n    float NdotV = clam" +
                    "p(dot(n, v), 0.0, 1.0);\r\n    float NdotH = clamp(dot(n, h), 0.0, 1.0);\r\n    floa" +
                    "t LdotH = clamp(dot(l, h), 0.0, 1.0);\r\n    float VdotH = clamp(dot(v, h), 0.0, 1" +
                    ".0);\r\n\r\n    return AngularInfo(\r\n        NdotL,\r\n        NdotV,\r\n        NdotH,\r" +
                    "\n        LdotH,\r\n        VdotH,\r\n        vec3(0, 0, 0)\r\n    );\r\n}\r\n\r\n// KHR_ligh" +
                    "ts_punctual extension.\r\n// see https://github.com/KhronosGroup/glTF/tree/master/" +
                    "extensions/2.0/Khronos/KHR_lights_punctual\r\n\r\nstruct Light\r\n{\r\n    vec3 directio" +
                    "n;\r\n    float range;\r\n\r\n    vec3 color;\r\n    float intensity;\r\n\r\n    vec3 positi" +
                    "on;\r\n    float innerConeCos;\r\n\r\n    float outerConeCos;\r\n    int type;\r\n\r\n    ve" +
                    "c2 padding;\r\n};\r\n\r\nconst int LightType_Directional = 0;\r\nconst int LightType_Poi" +
                    "nt = 1;\r\nconst int LightType_Spot = 2;\r\n\r\n#ifdef USE_PUNCTUAL\r\nuniform Light u_L" +
                    "ights[LIGHT_COUNT];\r\n#endif\r\n\r\nstruct MaterialInfo\r\n{\r\n    float perceptualRough" +
                    "ness;    // roughness value, as authored by the model creator (input to shader)\r" +
                    "\n    vec3 reflectance0;            // full reflectance color (normal incidence a" +
                    "ngle)\r\n\r\n    float alphaRoughness;         // roughness mapped to a more linear " +
                    "change in the roughness (proposed by [2])\r\n    vec3 diffuseColor;            // " +
                    "color contribution from diffuse lighting\r\n\r\n    vec3 reflectance90;           //" +
                    " reflectance color at grazing angle\r\n    vec3 specularColor;           // color " +
                    "contribution from specular lighting\r\n};\r\n\r\n// Calculation of the lighting contri" +
                    "bution from an optional Image Based Light source.\r\n// Precomputed Environment Ma" +
                    "ps are required uniform inputs and are computed as outlined in [1].\r\n// See our " +
                    "README.md on Environment Maps [3] for additional discussion.\r\n#ifdef USE_IBL\r\nve" +
                    "c3 getIBLContribution(MaterialInfo materialInfo, vec3 n, vec3 v)\r\n{\r\n    float N" +
                    "dotV = clamp(dot(n, v), 0.0, 1.0);\r\n\r\n    float lod = clamp(materialInfo.percept" +
                    "ualRoughness * float(u_MipCount), 0.0, float(u_MipCount));\r\n    vec3 reflection " +
                    "= normalize(reflect(-v, n));\r\n\r\n    vec2 brdfSamplePoint = clamp(vec2(NdotV, mat" +
                    "erialInfo.perceptualRoughness), vec2(0.0, 0.0), vec2(1.0, 1.0));\r\n    // retriev" +
                    "e a scale and bias to F0. See [1], Figure 3\r\n    vec2 brdf = texture(sampler2D(b" +
                    "rdfLUTTexture, brdfLUTSampler), brdfSamplePoint).rg;\r\n\r\n#ifdef USE_TEX_LOD\r\n\tvec" +
                    "4 diffuseSample = textureLod(samplerCube(SpecularEnvTexture, SpecularEnvSampler)" +
                    ", n, 6);\r\n    vec4 specularSample = textureLod(samplerCube(SpecularEnvTexture, S" +
                    "pecularEnvSampler), reflection, lod);\r\n#else\r\n    vec4 diffuseSample = texture(s" +
                    "amplerCube(DiffuseEnvTexture, DiffuseEnvSampler), n);\r\n    vec4 specularSample =" +
                    " texture(samplerCube(SpecularEnvTexture, SpecularEnvSampler), reflection);\r\n#end" +
                    "if\r\n\r\n#ifdef USE_HDR\r\n    // Already linear.\r\n    vec3 diffuseLight = diffuseSam" +
                    "ple.rgb;\r\n    vec3 specularLight = specularSample.rgb;\r\n#else\r\n    vec3 diffuseL" +
                    "ight = SRGBtoLINEAR(diffuseSample).rgb;\r\n    vec3 specularLight = SRGBtoLINEAR(s" +
                    "pecularSample).rgb;\r\n#endif\r\n\r\n    vec3 diffuse = diffuseLight * materialInfo.di" +
                    "ffuseColor;\r\n    vec3 specular = specularLight * (materialInfo.specularColor * b" +
                    "rdf.x + brdf.y);\r\n\r\n    return diffuse + specular;\r\n}\r\n#endif\r\n\r\n// Lambert ligh" +
                    "ting\r\n// see https://seblagarde.wordpress.com/2012/01/08/pi-or-not-to-pi-in-game" +
                    "-lighting-equation/\r\nvec3 diffuse(MaterialInfo materialInfo)\r\n{\r\n    return mate" +
                    "rialInfo.diffuseColor / M_PI;\r\n}\r\n\r\n// The following equation models the Fresnel" +
                    " reflectance term of the spec equation (aka F())\r\n// Implementation of fresnel f" +
                    "rom [4], Equation 15\r\nvec3 specularReflection(MaterialInfo materialInfo, Angular" +
                    "Info angularInfo)\r\n{\r\n    return materialInfo.reflectance0 + (materialInfo.refle" +
                    "ctance90 - materialInfo.reflectance0) * pow(clamp(1.0 - angularInfo.VdotH, 0.0, " +
                    "1.0), 5.0);\r\n}\r\n\r\n// Smith Joint GGX\r\n// Note: Vis = G / (4 * NdotL * NdotV)\r\n//" +
                    " see Eric Heitz. 2014. Understanding the Masking-Shadowing Function in Microface" +
                    "t-Based BRDFs. Journal of Computer Graphics Techniques, 3\r\n// see Real-Time Rend" +
                    "ering. Page 331 to 336.\r\n// see https://google.github.io/filament/Filament.md.ht" +
                    "ml#materialsystem/specularbrdf/geometricshadowing(specularg)\r\nfloat visibilityOc" +
                    "clusion(MaterialInfo materialInfo, AngularInfo angularInfo)\r\n{\r\n    float NdotL " +
                    "= angularInfo.NdotL;\r\n    float NdotV = angularInfo.NdotV;\r\n    float alphaRough" +
                    "nessSq = materialInfo.alphaRoughness * materialInfo.alphaRoughness;\r\n\r\n    float" +
                    " GGXV = NdotL * sqrt(NdotV * NdotV * (1.0 - alphaRoughnessSq) + alphaRoughnessSq" +
                    ");\r\n    float GGXL = NdotV * sqrt(NdotL * NdotL * (1.0 - alphaRoughnessSq) + alp" +
                    "haRoughnessSq);\r\n\r\n    float GGX = GGXV + GGXL;\r\n    if (GGX > 0.0)\r\n    {\r\n    " +
                    "    return 0.5 / GGX;\r\n    }\r\n    return 0.0;\r\n}\r\n\r\n// The following equation(s)" +
                    " model the distribution of microfacet normals across the area being drawn (aka D" +
                    "())\r\n// Implementation from \"Average Irregularity Representation of a Roughened " +
                    "Surface for Ray Reflection\" by T. S. Trowbridge, and K. P. Reitz\r\n// Follows the" +
                    " distribution function recommended in the SIGGRAPH 2013 course notes from EPIC G" +
                    "ames [1], Equation 3.\r\nfloat microfacetDistribution(MaterialInfo materialInfo, A" +
                    "ngularInfo angularInfo)\r\n{\r\n    float alphaRoughnessSq = materialInfo.alphaRough" +
                    "ness * materialInfo.alphaRoughness;\r\n    float f = (angularInfo.NdotH * alphaRou" +
                    "ghnessSq - angularInfo.NdotH) * angularInfo.NdotH + 1.0;\r\n    return alphaRoughn" +
                    "essSq / (M_PI * f * f);\r\n}\r\n\r\nvec3 getPointShade(vec3 pointToLight, MaterialInfo" +
                    " materialInfo, vec3 normal, vec3 view)\r\n{\r\n    AngularInfo angularInfo = getAngu" +
                    "larInfo(pointToLight, normal, view);\r\n\r\n    if (angularInfo.NdotL > 0.0 || angul" +
                    "arInfo.NdotV > 0.0)\r\n    {\r\n        // Calculate the shading terms for the micro" +
                    "facet specular shading model\r\n        vec3 F = specularReflection(materialInfo, " +
                    "angularInfo);\r\n        float Vis = visibilityOcclusion(materialInfo, angularInfo" +
                    ");\r\n        float D = microfacetDistribution(materialInfo, angularInfo);\r\n\r\n    " +
                    "    // Calculation of analytical lighting contribution\r\n        vec3 diffuseCont" +
                    "rib = (1.0 - F) * diffuse(materialInfo);\r\n        vec3 specContrib = F * Vis * D" +
                    ";\r\n\r\n        // Obtain final intensity as reflectance (BRDF) scaled by the energ" +
                    "y of the light (cosine law)\r\n        return angularInfo.NdotL * (diffuseContrib " +
                    "+ specContrib);\r\n    }\r\n\r\n    return vec3(0.0, 0.0, 0.0);\r\n}\r\n\r\n// https://githu" +
                    "b.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_lights_punctual/R" +
                    "EADME.md#range-property\r\nfloat getRangeAttenuation(float range, float distance)\r" +
                    "\n{\r\n    if (range < 0.0)\r\n    {\r\n        // negative range means unlimited\r\n    " +
                    "    return 1.0;\r\n    }\r\n    return max(min(1.0 - pow(distance / range, 4.0), 1.0" +
                    "), 0.0) / pow(distance, 2.0);\r\n}\r\n\r\n// https://github.com/KhronosGroup/glTF/blob" +
                    "/master/extensions/2.0/Khronos/KHR_lights_punctual/README.md#inner-and-outer-con" +
                    "e-angles\r\nfloat getSpotAttenuation(vec3 pointToLight, vec3 spotDirection, float " +
                    "outerConeCos, float innerConeCos)\r\n{\r\n    float actualCos = dot(normalize(spotDi" +
                    "rection), normalize(-pointToLight));\r\n    if (actualCos > outerConeCos)\r\n    {\r\n" +
                    "        if (actualCos < innerConeCos)\r\n        {\r\n            return smoothstep(" +
                    "outerConeCos, innerConeCos, actualCos);\r\n        }\r\n        return 1.0;\r\n    }\r\n" +
                    "    return 0.0;\r\n}\r\n\r\nvec3 applyDirectionalLight(Light light, MaterialInfo mater" +
                    "ialInfo, vec3 normal, vec3 view)\r\n{\r\n    vec3 pointToLight = -light.direction;\r\n" +
                    "    vec3 shade = getPointShade(pointToLight, materialInfo, normal, view);\r\n    r" +
                    "eturn light.intensity * light.color * shade;\r\n}\r\n\r\nvec3 applyPointLight(Light li" +
                    "ght, MaterialInfo materialInfo, vec3 normal, vec3 view)\r\n{\r\n    vec3 pointToLigh" +
                    "t = light.position - v_Position;\r\n    float distance = length(pointToLight);\r\n  " +
                    "  float attenuation = getRangeAttenuation(light.range, distance);\r\n    vec3 shad" +
                    "e = getPointShade(pointToLight, materialInfo, normal, view);\r\n    return attenua" +
                    "tion * light.intensity * light.color * shade;\r\n}\r\n\r\nvec3 applySpotLight(Light li" +
                    "ght, MaterialInfo materialInfo, vec3 normal, vec3 view)\r\n{\r\n    vec3 pointToLigh" +
                    "t = light.position - v_Position;\r\n    float distance = length(pointToLight);\r\n  " +
                    "  float rangeAttenuation = getRangeAttenuation(light.range, distance);\r\n    floa" +
                    "t spotAttenuation = getSpotAttenuation(pointToLight, light.direction, light.oute" +
                    "rConeCos, light.innerConeCos);\r\n    vec3 shade = getPointShade(pointToLight, mat" +
                    "erialInfo, normal, view);\r\n    return rangeAttenuation * spotAttenuation * light" +
                    ".intensity * light.color * shade;\r\n}\r\n\r\nvoid main()\r\n{\r\n    // Metallic and Roug" +
                    "hness material properties are packed together\r\n    // In glTF, these factors can" +
                    " be specified by fixed scalar values\r\n    // or from a metallic-roughness map\r\n " +
                    "   float perceptualRoughness = 0.0;\r\n    float metallic = 0.0;\r\n    vec4 baseCol" +
                    "or = vec4(0.0, 0.0, 0.0, 1.0);\r\n    vec3 diffuseColor = vec3(0.0);\r\n    vec3 spe" +
                    "cularColor= vec3(0.0);\r\n    vec3 f0 = vec3(0.04);\r\n\r\n#ifdef MATERIAL_SPECULARGLO" +
                    "SSINESS\r\n\r\n#ifdef HAS_SPECULAR_GLOSSINESS_MAP\r\n    vec4 sgSample = SRGBtoLINEAR(" +
                    "texture(sampler2D(SpecularGlossinessTexture, SpecularGlossinessSampler), getSpec" +
                    "ularGlossinessUV()));\r\n    perceptualRoughness = (1.0 - sgSample.a * GlossinessF" +
                    "actor); // glossiness to roughness\r\n    f0 = sgSample.rgb * SpecularFactor; // s" +
                    "pecular\r\n#else\r\n    f0 = SpecularFactor;\r\n    perceptualRoughness = 1.0 - Glossi" +
                    "nessFactor;\r\n#endif // ! HAS_SPECULAR_GLOSSINESS_MAP\r\n\r\n#ifdef HAS_DIFFUSE_MAP\r\n" +
                    "    baseColor = SRGBtoLINEAR(texture(sampler2D(DiffuseTexture, DiffuseSampler), " +
                    "getDiffuseUV())) * DiffuseFactor;\r\n#else\r\n    baseColor = DiffuseFactor;\r\n#endif" +
                    " // !HAS_DIFFUSE_MAP\r\n\r\n    baseColor *= getVertexColor();\r\n\r\n    // f0 = specul" +
                    "ar\r\n    specularColor = f0;\r\n    float oneMinusSpecularStrength = 1.0 - max(max(" +
                    "f0.r, f0.g), f0.b);\r\n    diffuseColor = baseColor.rgb * oneMinusSpecularStrength" +
                    ";\r\n\r\n#ifdef DEBUG_METALLIC\r\n    // do conversion between metallic M-R and S-G me" +
                    "tallic\r\n    metallic = solveMetallic(baseColor.rgb, specularColor, oneMinusSpecu" +
                    "larStrength);\r\n#endif // ! DEBUG_METALLIC\r\n\r\n#endif // ! MATERIAL_SPECULARGLOSSI" +
                    "NESS\r\n\r\n#ifdef MATERIAL_METALLICROUGHNESS\r\n\r\n#ifdef HAS_METALLIC_ROUGHNESS_MAP\r\n" +
                    "    // Roughness is stored in the \'g\' channel, metallic is stored in the \'b\' cha" +
                    "nnel.\r\n    // This layout intentionally reserves the \'r\' channel for (optional) " +
                    "occlusion map data\r\n    vec4 mrSample = texture(sampler2D(MetallicRoughnessTextu" +
                    "re, MetallicRoughnessSampler), getMetallicRoughnessUV());\r\n    perceptualRoughne" +
                    "ss = mrSample.g * RoughnessFactor;\r\n    metallic = mrSample.b * MetallicFactor;\r" +
                    "\n#else\r\n    metallic = MetallicFactor;\r\n    perceptualRoughness = RoughnessFacto" +
                    "r;\r\n#endif\r\n\r\n    // The albedo may be defined from a base texture or a flat col" +
                    "or\r\n#ifdef HAS_BASE_COLOR_MAP\r\n    baseColor = SRGBtoLINEAR(texture(sampler2D(Ba" +
                    "seColorTexture, BaseColorSampler), getBaseColorUV())) * BaseColorFactor;\r\n#else\r" +
                    "\n    baseColor = BaseColorFactor;\r\n#endif\r\n\r\n    baseColor *= getVertexColor();\r" +
                    "\n\r\n    diffuseColor = baseColor.rgb * (vec3(1.0) - f0) * (1.0 - metallic);\r\n\r\n  " +
                    "  specularColor = mix(f0, baseColor.rgb, metallic);\r\n\r\n#endif // ! MATERIAL_META" +
                    "LLICROUGHNESS\r\n\r\n#ifdef ALPHAMODE_MASK\r\n    if(baseColor.a < AlphaCutoff)\r\n    {" +
                    "\r\n        discard;\r\n    }\r\n    baseColor.a = 1.0;\r\n#endif\r\n\r\n#ifdef ALPHAMODE_OP" +
                    "AQUE\r\n    baseColor.a = 1.0;\r\n#endif\r\n\r\n#ifdef MATERIAL_UNLIT\r\n    outFragColor " +
                    "= vec4(LINEARtoSRGB(baseColor.rgb), baseColor.a);\r\n    return;\r\n#endif\r\n\r\n    pe" +
                    "rceptualRoughness = clamp(perceptualRoughness, 0.0, 1.0);\r\n    metallic = clamp(" +
                    "metallic, 0.0, 1.0);\r\n\r\n    // Roughness is authored as perceptual roughness; as" +
                    " is convention,\r\n    // convert to material roughness by squaring the perceptual" +
                    " roughness [2].\r\n    float alphaRoughness = perceptualRoughness * perceptualRoug" +
                    "hness;\r\n\r\n    // Compute reflectance.\r\n    float reflectance = max(max(specularC" +
                    "olor.r, specularColor.g), specularColor.b);\r\n\r\n    vec3 specularEnvironmentR0 = " +
                    "specularColor.rgb;\r\n    // Anything less than 2% is physically impossible and is" +
                    " instead considered to be shadowing. Compare to \"Real-Time-Rendering\" 4th editon" +
                    " on page 325.\r\n    vec3 specularEnvironmentR90 = vec3(clamp(reflectance * 50.0, " +
                    "0.0, 1.0));\r\n\r\n    MaterialInfo materialInfo = MaterialInfo(\r\n        perceptual" +
                    "Roughness,\r\n        specularEnvironmentR0,\r\n        alphaRoughness,\r\n        dif" +
                    "fuseColor,\r\n        specularEnvironmentR90,\r\n        specularColor\r\n    );\r\n\r\n  " +
                    "  // LIGHTING\r\n\r\n    vec3 color = vec3(0.0, 0.0, 0.0);\r\n    vec3 normal = getNor" +
                    "mal();\r\n    vec3 view = normalize(u_Camera - v_Position);\r\n\r\n#ifdef USE_PUNCTUAL" +
                    "\r\n    for (int i = 0; i < LIGHT_COUNT; ++i)\r\n    {\r\n        Light light = u_Ligh" +
                    "ts[i];\r\n        if (light.type == LightType_Directional)\r\n        {\r\n           " +
                    " color += applyDirectionalLight(light, materialInfo, normal, view);\r\n        }\r\n" +
                    "        else if (light.type == LightType_Point)\r\n        {\r\n            color +=" +
                    " applyPointLight(light, materialInfo, normal, view);\r\n        }\r\n        else if" +
                    " (light.type == LightType_Spot)\r\n        {\r\n            color += applySpotLight(" +
                    "light, materialInfo, normal, view);\r\n        }\r\n    }\r\n#endif\r\n\r\n    // Calculat" +
                    "e lighting contribution from image based lighting source (IBL)\r\n#ifdef USE_IBL\r\n" +
                    "    color += getIBLContribution(materialInfo, normal, view);\r\n#endif\r\n\r\n    floa" +
                    "t ao = 1.0;\r\n    // Apply optional PBR terms for additional (optional) shading\r\n" +
                    "#ifdef HAS_OCCLUSION_MAP\r\n    ao = texture(sampler2D(OcclusionTexture, Occlusion" +
                    "Sampler), getOcclusionUV()).r;\r\n    color = mix(color, color * ao, OcclusionStre" +
                    "ngth);\r\n#endif\r\n\r\n    vec3 emissive = vec3(0);\r\n#ifdef HAS_EMISSIVE_MAP\r\n    emi" +
                    "ssive = SRGBtoLINEAR(texture(sampler2D(EmissiveTexture, EmissiveSampler), getEmi" +
                    "ssiveUV())).rgb * EmissiveFactor;\r\n    color += emissive;\r\n#endif\r\n\r\n#ifndef DEB" +
                    "UG_OUTPUT // no debug\r\n\r\n   // regular shading\r\n   outFragColor = vec4(toneMap(c" +
                    "olor), baseColor.a);\r\n\r\n#else // debug output\r\n\r\n    #ifdef DEBUG_METALLIC\r\n    " +
                    "    outFragColor.rgb = vec3(metallic);\r\n    #endif\r\n\r\n    #ifdef DEBUG_ROUGHNESS" +
                    "\r\n        outFragColor.rgb = vec3(perceptualRoughness);\r\n    #endif\r\n\r\n    #ifde" +
                    "f DEBUG_NORMAL\r\n        #ifdef HAS_NORMAL_MAP\r\n            outFragColor.rgb = te" +
                    "xture2D(NormalSampler, getNormalUV()).rgb;\r\n        #else\r\n            outFragCo" +
                    "lor.rgb = vec3(0.5, 0.5, 1.0);\r\n        #endif\r\n    #endif\r\n\r\n    #ifdef DEBUG_B" +
                    "ASECOLOR\r\n        outFragColor.rgb = LINEARtoSRGB(baseColor.rgb);\r\n    #endif\r\n\r" +
                    "\n    #ifdef DEBUG_OCCLUSION\r\n        outFragColor.rgb = vec3(ao);\r\n    #endif\r\n\r" +
                    "\n    #ifdef DEBUG_EMISSIVE\r\n        outFragColor.rgb = LINEARtoSRGB(emissive);\r\n" +
                    "    #endif\r\n\r\n    #ifdef DEBUG_F0\r\n        outFragColor.rgb = vec3(f0);\r\n    #en" +
                    "dif\r\n\r\n    #ifdef DEBUG_ALPHA\r\n        outFragColor.rgb = vec3(baseColor.a);\r\n  " +
                    "  #endif\r\n\r\n    outFragColor.a = 1.0;\r\n\r\n#endif // !DEBUG_OUTPUT\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class FragmentShaderBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
